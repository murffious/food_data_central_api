/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient.js";
import {AbridgedFoodItem} from '../model/AbridgedFoodItem.js';
import {FoodListCriteria} from '../model/FoodListCriteria.js';
import {FoodSearchCriteria} from '../model/FoodSearchCriteria.js';
import {FoodsCriteria} from '../model/FoodsCriteria.js';
import {InlineResponse200} from '../model/InlineResponse200.js';
import {SearchResult} from '../model/SearchResult.js';

/**
* FDC service.
* @module api/FDCApi
* @version 1.0.1
*/
export class FDCApi {

    /**
    * Constructs a new FDCApi. 
    * @alias module:api/FDCApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getFood operation.
     * @callback moduleapi/FDCApi~getFoodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches details for one food item by FDC ID
     * Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
     * @param {String} fdcId FDC id of the food to retrieve
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).
     * @param {Array.<Number>} opts.nutrients Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
     * @param {module:api/FDCApi~getFoodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFood(fdcId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fdcId' is set
      if (fdcId === undefined || fdcId === null) {
        throw new Error("Missing the required parameter 'fdcId' when calling getFood");
      }

      let pathParams = {
        'fdcId': fdcId
      };
      let queryParams = {
        'format': opts['format'],'nutrients': this.apiClient.buildCollectionParam(opts['nutrients'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/food/{fdcId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFoods operation.
     * @callback moduleapi/FDCApi~getFoodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches details for multiple food items using input FDC IDs
     * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
     * @param {Array.<String>} fdcIds List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).
     * @param {Array.<Number>} opts.nutrients Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
     * @param {module:api/FDCApi~getFoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFoods(fdcIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fdcIds' is set
      if (fdcIds === undefined || fdcIds === null) {
        throw new Error("Missing the required parameter 'fdcIds' when calling getFoods");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'fdcIds': this.apiClient.buildCollectionParam(fdcIds, 'multi'),'format': opts['format'],'nutrients': this.apiClient.buildCollectionParam(opts['nutrients'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/v1/foods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFoodsList operation.
     * @callback moduleapi/FDCApi~getFoodsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AbridgedFoodItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paged list of foods, in the &#x27;abridged&#x27; format
     * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.dataType Optional. Filter on a specific data type; specify one or more values in an array.
     * @param {Number} opts.pageSize Optional. Maximum number of results to return for the current page. Default is 50.
     * @param {Number} opts.pageNumber Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
     * @param {module:model/String} opts.sortBy Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
     * @param {module:model/String} opts.sortOrder Optional. The sort direction for the results. Only applicable if sortBy is specified.
     * @param {module:api/FDCApi~getFoodsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFoodsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'dataType': this.apiClient.buildCollectionParam(opts['dataType'], 'csv'),'pageSize': opts['pageSize'],'pageNumber': opts['pageNumber'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AbridgedFoodItem];

      return this.apiClient.callApi(
        '/v1/foods/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFoodsSearch operation.
     * @callback moduleapi/FDCApi~getFoodsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of foods that matched search (query) keywords
     * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
     * @param {String} query One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.dataType Optional. Filter on a specific data type; specify one or more values in an array.
     * @param {Number} opts.pageSize Optional. Maximum number of results to return for the current page. Default is 50.
     * @param {Number} opts.pageNumber Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
     * @param {module:model/String} opts.sortBy Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
     * @param {module:model/String} opts.sortOrder Optional. The sort direction for the results. Only applicable if sortBy is specified.
     * @param {String} opts.brandOwner Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods
     * @param {module:api/FDCApi~getFoodsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFoodsSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getFoodsSearch");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'query': query,'dataType': this.apiClient.buildCollectionParam(opts['dataType'], 'csv'),'pageSize': opts['pageSize'],'pageNumber': opts['pageNumber'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'brandOwner': opts['brandOwner']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResult;

      return this.apiClient.callApi(
        '/v1/foods/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getJsonSpec operation.
     * @callback moduleapi/FDCApi~getJsonSpecCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns this documentation in JSON format
     * The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
     * @param {module:api/FDCApi~getJsonSpecCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJsonSpec(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/json-spec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getYamlSpec operation.
     * @callback moduleapi/FDCApi~getYamlSpecCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns this documentation in JSON format
     * The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
     * @param {module:api/FDCApi~getYamlSpecCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getYamlSpec(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/yaml-spec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postFoods operation.
     * @callback moduleapi/FDCApi~postFoodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches details for multiple food items using input FDC IDs
     * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
     * @param {module:model/FoodsCriteria} body 
     * @param {module:api/FDCApi~postFoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postFoods(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFoods");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/v1/foods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postFoodsList operation.
     * @callback moduleapi/FDCApi~postFoodsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AbridgedFoodItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paged list of foods, in the &#x27;abridged&#x27; format
     * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
     * @param {module:model/FoodListCriteria} body 
     * @param {module:api/FDCApi~postFoodsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postFoodsList(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFoodsList");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AbridgedFoodItem];

      return this.apiClient.callApi(
        '/v1/foods/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postFoodsSearch operation.
     * @callback moduleapi/FDCApi~postFoodsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of foods that matched search (query) keywords
     * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
     * @param {module:model/FoodSearchCriteria} body The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)
     * @param {module:api/FDCApi~postFoodsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postFoodsSearch(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFoodsSearch");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResult;

      return this.apiClient.callApi(
        '/v1/foods/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}