/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BrandedFoodItemLabelNutrients', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.BrandedFoodItemLabelNutrients();
      });

      it('should create an instance of BrandedFoodItemLabelNutrients', function() {
        // TODO: update the code to test BrandedFoodItemLabelNutrients
        expect(instance).to.be.a(FoodDataCentralApi.BrandedFoodItemLabelNutrients);
      });

      it('should have the property fat (base name: "fat")', function() {
        // TODO: update the code to test the property fat
        expect(instance).to.have.property('fat');
        // expect(instance.fat).to.be(expectedValueLiteral);
      });

      it('should have the property saturatedFat (base name: "saturatedFat")', function() {
        // TODO: update the code to test the property saturatedFat
        expect(instance).to.have.property('saturatedFat');
        // expect(instance.saturatedFat).to.be(expectedValueLiteral);
      });

      it('should have the property transFat (base name: "transFat")', function() {
        // TODO: update the code to test the property transFat
        expect(instance).to.have.property('transFat');
        // expect(instance.transFat).to.be(expectedValueLiteral);
      });

      it('should have the property cholesterol (base name: "cholesterol")', function() {
        // TODO: update the code to test the property cholesterol
        expect(instance).to.have.property('cholesterol');
        // expect(instance.cholesterol).to.be(expectedValueLiteral);
      });

      it('should have the property sodium (base name: "sodium")', function() {
        // TODO: update the code to test the property sodium
        expect(instance).to.have.property('sodium');
        // expect(instance.sodium).to.be(expectedValueLiteral);
      });

      it('should have the property carbohydrates (base name: "carbohydrates")', function() {
        // TODO: update the code to test the property carbohydrates
        expect(instance).to.have.property('carbohydrates');
        // expect(instance.carbohydrates).to.be(expectedValueLiteral);
      });

      it('should have the property fiber (base name: "fiber")', function() {
        // TODO: update the code to test the property fiber
        expect(instance).to.have.property('fiber');
        // expect(instance.fiber).to.be(expectedValueLiteral);
      });

      it('should have the property sugars (base name: "sugars")', function() {
        // TODO: update the code to test the property sugars
        expect(instance).to.have.property('sugars');
        // expect(instance.sugars).to.be(expectedValueLiteral);
      });

      it('should have the property protein (base name: "protein")', function() {
        // TODO: update the code to test the property protein
        expect(instance).to.have.property('protein');
        // expect(instance.protein).to.be(expectedValueLiteral);
      });

      it('should have the property calcium (base name: "calcium")', function() {
        // TODO: update the code to test the property calcium
        expect(instance).to.have.property('calcium');
        // expect(instance.calcium).to.be(expectedValueLiteral);
      });

      it('should have the property iron (base name: "iron")', function() {
        // TODO: update the code to test the property iron
        expect(instance).to.have.property('iron');
        // expect(instance.iron).to.be(expectedValueLiteral);
      });

      it('should have the property potassium (base name: "potassium")', function() {
        // TODO: update the code to test the property potassium
        expect(instance).to.have.property('potassium');
        // expect(instance.potassium).to.be(expectedValueLiteral);
      });

      it('should have the property calories (base name: "calories")', function() {
        // TODO: update the code to test the property calories
        expect(instance).to.have.property('calories');
        // expect(instance.calories).to.be(expectedValueLiteral);
      });

    });
  });

}));
