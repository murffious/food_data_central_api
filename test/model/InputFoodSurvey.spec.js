/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InputFoodSurvey', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.InputFoodSurvey();
      });

      it('should create an instance of InputFoodSurvey', function() {
        // TODO: update the code to test InputFoodSurvey
        expect(instance).to.be.a(FoodDataCentralApi.InputFoodSurvey);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property foodDescription (base name: "foodDescription")', function() {
        // TODO: update the code to test the property foodDescription
        expect(instance).to.have.property('foodDescription');
        // expect(instance.foodDescription).to.be(expectedValueLiteral);
      });

      it('should have the property ingredientCode (base name: "ingredientCode")', function() {
        // TODO: update the code to test the property ingredientCode
        expect(instance).to.have.property('ingredientCode');
        // expect(instance.ingredientCode).to.be(expectedValueLiteral);
      });

      it('should have the property ingredientDescription (base name: "ingredientDescription")', function() {
        // TODO: update the code to test the property ingredientDescription
        expect(instance).to.have.property('ingredientDescription');
        // expect(instance.ingredientDescription).to.be(expectedValueLiteral);
      });

      it('should have the property ingredientWeight (base name: "ingredientWeight")', function() {
        // TODO: update the code to test the property ingredientWeight
        expect(instance).to.have.property('ingredientWeight');
        // expect(instance.ingredientWeight).to.be(expectedValueLiteral);
      });

      it('should have the property portionCode (base name: "portionCode")', function() {
        // TODO: update the code to test the property portionCode
        expect(instance).to.have.property('portionCode');
        // expect(instance.portionCode).to.be(expectedValueLiteral);
      });

      it('should have the property portionDescription (base name: "portionDescription")', function() {
        // TODO: update the code to test the property portionDescription
        expect(instance).to.have.property('portionDescription');
        // expect(instance.portionDescription).to.be(expectedValueLiteral);
      });

      it('should have the property sequenceNumber (base name: "sequenceNumber")', function() {
        // TODO: update the code to test the property sequenceNumber
        expect(instance).to.have.property('sequenceNumber');
        // expect(instance.sequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property surveyFlag (base name: "surveyFlag")', function() {
        // TODO: update the code to test the property surveyFlag
        expect(instance).to.have.property('surveyFlag');
        // expect(instance.surveyFlag).to.be(expectedValueLiteral);
      });

      it('should have the property unit (base name: "unit")', function() {
        // TODO: update the code to test the property unit
        expect(instance).to.have.property('unit');
        // expect(instance.unit).to.be(expectedValueLiteral);
      });

      it('should have the property inputFood (base name: "inputFood")', function() {
        // TODO: update the code to test the property inputFood
        expect(instance).to.have.property('inputFood');
        // expect(instance.inputFood).to.be(expectedValueLiteral);
      });

      it('should have the property retentionFactor (base name: "retentionFactor")', function() {
        // TODO: update the code to test the property retentionFactor
        expect(instance).to.have.property('retentionFactor');
        // expect(instance.retentionFactor).to.be(expectedValueLiteral);
      });

    });
  });

}));
