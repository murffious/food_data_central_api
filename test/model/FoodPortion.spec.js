/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FoodPortion', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.FoodPortion();
      });

      it('should create an instance of FoodPortion', function() {
        // TODO: update the code to test FoodPortion
        expect(instance).to.be.a(FoodDataCentralApi.FoodPortion);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property dataPoints (base name: "dataPoints")', function() {
        // TODO: update the code to test the property dataPoints
        expect(instance).to.have.property('dataPoints');
        // expect(instance.dataPoints).to.be(expectedValueLiteral);
      });

      it('should have the property gramWeight (base name: "gramWeight")', function() {
        // TODO: update the code to test the property gramWeight
        expect(instance).to.have.property('gramWeight');
        // expect(instance.gramWeight).to.be(expectedValueLiteral);
      });

      it('should have the property minYearAcquired (base name: "minYearAcquired")', function() {
        // TODO: update the code to test the property minYearAcquired
        expect(instance).to.have.property('minYearAcquired');
        // expect(instance.minYearAcquired).to.be(expectedValueLiteral);
      });

      it('should have the property modifier (base name: "modifier")', function() {
        // TODO: update the code to test the property modifier
        expect(instance).to.have.property('modifier');
        // expect(instance.modifier).to.be(expectedValueLiteral);
      });

      it('should have the property portionDescription (base name: "portionDescription")', function() {
        // TODO: update the code to test the property portionDescription
        expect(instance).to.have.property('portionDescription');
        // expect(instance.portionDescription).to.be(expectedValueLiteral);
      });

      it('should have the property sequenceNumber (base name: "sequenceNumber")', function() {
        // TODO: update the code to test the property sequenceNumber
        expect(instance).to.have.property('sequenceNumber');
        // expect(instance.sequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property measureUnit (base name: "measureUnit")', function() {
        // TODO: update the code to test the property measureUnit
        expect(instance).to.have.property('measureUnit');
        // expect(instance.measureUnit).to.be(expectedValueLiteral);
      });

    });
  });

}));
