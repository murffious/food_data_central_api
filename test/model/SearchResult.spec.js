/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SearchResult', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.SearchResult();
      });

      it('should create an instance of SearchResult', function() {
        // TODO: update the code to test SearchResult
        expect(instance).to.be.a(FoodDataCentralApi.SearchResult);
      });

      it('should have the property foodSearchCriteria (base name: "foodSearchCriteria")', function() {
        // TODO: update the code to test the property foodSearchCriteria
        expect(instance).to.have.property('foodSearchCriteria');
        // expect(instance.foodSearchCriteria).to.be(expectedValueLiteral);
      });

      it('should have the property totalHits (base name: "totalHits")', function() {
        // TODO: update the code to test the property totalHits
        expect(instance).to.have.property('totalHits');
        // expect(instance.totalHits).to.be(expectedValueLiteral);
      });

      it('should have the property currentPage (base name: "currentPage")', function() {
        // TODO: update the code to test the property currentPage
        expect(instance).to.have.property('currentPage');
        // expect(instance.currentPage).to.be(expectedValueLiteral);
      });

      it('should have the property totalPages (base name: "totalPages")', function() {
        // TODO: update the code to test the property totalPages
        expect(instance).to.have.property('totalPages');
        // expect(instance.totalPages).to.be(expectedValueLiteral);
      });

      it('should have the property foods (base name: "foods")', function() {
        // TODO: update the code to test the property foods
        expect(instance).to.have.property('foods');
        // expect(instance.foods).to.be(expectedValueLiteral);
      });

    });
  });

}));
