/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FoodUpdateLog', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.FoodUpdateLog();
      });

      it('should create an instance of FoodUpdateLog', function() {
        // TODO: update the code to test FoodUpdateLog
        expect(instance).to.be.a(FoodDataCentralApi.FoodUpdateLog);
      });

      it('should have the property fdcId (base name: "fdcId")', function() {
        // TODO: update the code to test the property fdcId
        expect(instance).to.have.property('fdcId');
        // expect(instance.fdcId).to.be(expectedValueLiteral);
      });

      it('should have the property availableDate (base name: "availableDate")', function() {
        // TODO: update the code to test the property availableDate
        expect(instance).to.have.property('availableDate');
        // expect(instance.availableDate).to.be(expectedValueLiteral);
      });

      it('should have the property brandOwner (base name: "brandOwner")', function() {
        // TODO: update the code to test the property brandOwner
        expect(instance).to.have.property('brandOwner');
        // expect(instance.brandOwner).to.be(expectedValueLiteral);
      });

      it('should have the property dataSource (base name: "dataSource")', function() {
        // TODO: update the code to test the property dataSource
        expect(instance).to.have.property('dataSource');
        // expect(instance.dataSource).to.be(expectedValueLiteral);
      });

      it('should have the property dataType (base name: "dataType")', function() {
        // TODO: update the code to test the property dataType
        expect(instance).to.have.property('dataType');
        // expect(instance.dataType).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property foodClass (base name: "foodClass")', function() {
        // TODO: update the code to test the property foodClass
        expect(instance).to.have.property('foodClass');
        // expect(instance.foodClass).to.be(expectedValueLiteral);
      });

      it('should have the property gtinUpc (base name: "gtinUpc")', function() {
        // TODO: update the code to test the property gtinUpc
        expect(instance).to.have.property('gtinUpc');
        // expect(instance.gtinUpc).to.be(expectedValueLiteral);
      });

      it('should have the property householdServingFullText (base name: "householdServingFullText")', function() {
        // TODO: update the code to test the property householdServingFullText
        expect(instance).to.have.property('householdServingFullText');
        // expect(instance.householdServingFullText).to.be(expectedValueLiteral);
      });

      it('should have the property ingredients (base name: "ingredients")', function() {
        // TODO: update the code to test the property ingredients
        expect(instance).to.have.property('ingredients');
        // expect(instance.ingredients).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedDate (base name: "modifiedDate")', function() {
        // TODO: update the code to test the property modifiedDate
        expect(instance).to.have.property('modifiedDate');
        // expect(instance.modifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property publicationDate (base name: "publicationDate")', function() {
        // TODO: update the code to test the property publicationDate
        expect(instance).to.have.property('publicationDate');
        // expect(instance.publicationDate).to.be(expectedValueLiteral);
      });

      it('should have the property servingSize (base name: "servingSize")', function() {
        // TODO: update the code to test the property servingSize
        expect(instance).to.have.property('servingSize');
        // expect(instance.servingSize).to.be(expectedValueLiteral);
      });

      it('should have the property servingSizeUnit (base name: "servingSizeUnit")', function() {
        // TODO: update the code to test the property servingSizeUnit
        expect(instance).to.have.property('servingSizeUnit');
        // expect(instance.servingSizeUnit).to.be(expectedValueLiteral);
      });

      it('should have the property brandedFoodCategory (base name: "brandedFoodCategory")', function() {
        // TODO: update the code to test the property brandedFoodCategory
        expect(instance).to.have.property('brandedFoodCategory');
        // expect(instance.brandedFoodCategory).to.be(expectedValueLiteral);
      });

      it('should have the property changes (base name: "changes")', function() {
        // TODO: update the code to test the property changes
        expect(instance).to.have.property('changes');
        // expect(instance.changes).to.be(expectedValueLiteral);
      });

      it('should have the property foodAttributes (base name: "foodAttributes")', function() {
        // TODO: update the code to test the property foodAttributes
        expect(instance).to.have.property('foodAttributes');
        // expect(instance.foodAttributes).to.be(expectedValueLiteral);
      });

    });
  });

}));
