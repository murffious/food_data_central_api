/*
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FoodDataCentralApi);
  }
}(this, function(expect, FoodDataCentralApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FoundationFoodItem', function() {
      beforeEach(function() {
        instance = new FoodDataCentralApi.FoundationFoodItem();
      });

      it('should create an instance of FoundationFoodItem', function() {
        // TODO: update the code to test FoundationFoodItem
        expect(instance).to.be.a(FoodDataCentralApi.FoundationFoodItem);
      });

      it('should have the property fdcId (base name: "fdcId")', function() {
        // TODO: update the code to test the property fdcId
        expect(instance).to.have.property('fdcId');
        // expect(instance.fdcId).to.be(expectedValueLiteral);
      });

      it('should have the property dataType (base name: "dataType")', function() {
        // TODO: update the code to test the property dataType
        expect(instance).to.have.property('dataType');
        // expect(instance.dataType).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property foodClass (base name: "foodClass")', function() {
        // TODO: update the code to test the property foodClass
        expect(instance).to.have.property('foodClass');
        // expect(instance.foodClass).to.be(expectedValueLiteral);
      });

      it('should have the property footNote (base name: "footNote")', function() {
        // TODO: update the code to test the property footNote
        expect(instance).to.have.property('footNote');
        // expect(instance.footNote).to.be(expectedValueLiteral);
      });

      it('should have the property isHistoricalReference (base name: "isHistoricalReference")', function() {
        // TODO: update the code to test the property isHistoricalReference
        expect(instance).to.have.property('isHistoricalReference');
        // expect(instance.isHistoricalReference).to.be(expectedValueLiteral);
      });

      it('should have the property ndbNumber (base name: "ndbNumber")', function() {
        // TODO: update the code to test the property ndbNumber
        expect(instance).to.have.property('ndbNumber');
        // expect(instance.ndbNumber).to.be(expectedValueLiteral);
      });

      it('should have the property publicationDate (base name: "publicationDate")', function() {
        // TODO: update the code to test the property publicationDate
        expect(instance).to.have.property('publicationDate');
        // expect(instance.publicationDate).to.be(expectedValueLiteral);
      });

      it('should have the property scientificName (base name: "scientificName")', function() {
        // TODO: update the code to test the property scientificName
        expect(instance).to.have.property('scientificName');
        // expect(instance.scientificName).to.be(expectedValueLiteral);
      });

      it('should have the property foodCategory (base name: "foodCategory")', function() {
        // TODO: update the code to test the property foodCategory
        expect(instance).to.have.property('foodCategory');
        // expect(instance.foodCategory).to.be(expectedValueLiteral);
      });

      it('should have the property foodComponents (base name: "foodComponents")', function() {
        // TODO: update the code to test the property foodComponents
        expect(instance).to.have.property('foodComponents');
        // expect(instance.foodComponents).to.be(expectedValueLiteral);
      });

      it('should have the property foodNutrients (base name: "foodNutrients")', function() {
        // TODO: update the code to test the property foodNutrients
        expect(instance).to.have.property('foodNutrients');
        // expect(instance.foodNutrients).to.be(expectedValueLiteral);
      });

      it('should have the property foodPortions (base name: "foodPortions")', function() {
        // TODO: update the code to test the property foodPortions
        expect(instance).to.have.property('foodPortions');
        // expect(instance.foodPortions).to.be(expectedValueLiteral);
      });

      it('should have the property inputFoods (base name: "inputFoods")', function() {
        // TODO: update the code to test the property inputFoods
        expect(instance).to.have.property('inputFoods');
        // expect(instance.inputFoods).to.be(expectedValueLiteral);
      });

      it('should have the property nutrientConversionFactors (base name: "nutrientConversionFactors")', function() {
        // TODO: update the code to test the property nutrientConversionFactors
        expect(instance).to.have.property('nutrientConversionFactors');
        // expect(instance.nutrientConversionFactors).to.be(expectedValueLiteral);
      });

    });
  });

}));
